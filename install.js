#!/usr/bin/env node

import { execSync } from 'child_process';
import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

console.log('üöÄ Oracle Node MCP Server - Instala√ß√£o Autom√°tica\n');

async function install() {
  try {
    // 1. Verificar Node.js
    console.log('1Ô∏è‚É£ Verificando Node.js...');
    const nodeVersion = process.version;
    const majorVersion = parseInt(nodeVersion.slice(1).split('.')[0]);
    
    if (majorVersion < 18) {
      console.error('‚ùå Node.js 18+ √© necess√°rio. Vers√£o atual:', nodeVersion);
      process.exit(1);
    }
    console.log(`‚úÖ Node.js ${nodeVersion} (compat√≠vel)\n`);

    // 2. Instalar depend√™ncias
    console.log('2Ô∏è‚É£ Instalando depend√™ncias...');
    execSync('npm install', { stdio: 'inherit' });
    console.log('‚úÖ Depend√™ncias instaladas\n');

    // 3. Criar diret√≥rios necess√°rios
    console.log('3Ô∏è‚É£ Criando estrutura de diret√≥rios...');
    const directories = ['logs', 'config', 'backups', 'migrations', 'reports'];
    
    for (const dir of directories) {
      await fs.mkdir(path.join(__dirname, dir), { recursive: true });
      console.log(`   ‚úÖ ${dir}/`);
    }
    console.log('');

    // 4. Configurar arquivo .env
    console.log('4Ô∏è‚É£ Configurando arquivo .env...');
    const envPath = path.join(__dirname, '.env');
    const envExamplePath = path.join(__dirname, 'env.example');
    
    try {
      await fs.access(envPath);
      console.log('   ‚ö†Ô∏è  .env j√° existe (n√£o sobrescrevendo)');
    } catch {
      await fs.copyFile(envExamplePath, envPath);
      console.log('   ‚úÖ .env criado a partir do exemplo');
    }
    console.log('');

    // 5. Criar arquivos de configura√ß√£o
    console.log('5Ô∏è‚É£ Criando arquivos de configura√ß√£o...');
    const oracleConfig = {
      connection: {
        poolMin: 1,
        poolMax: 10,
        poolIncrement: 1,
        poolTimeout: 60,
        poolPingInterval: 60
      },
      monitoring: {
        healthCheckInterval: 300000,
        schemaCheckInterval: 600000,
        performanceCheckInterval: 300000
      },
      alerts: {
        tablespaceUsageThreshold: 80,
        connectionThreshold: 100,
        performanceThreshold: 1000
      }
    };

    await fs.writeFile(
      path.join(__dirname, 'config', 'oracle.json'),
      JSON.stringify(oracleConfig, null, 2)
    );
    console.log('   ‚úÖ config/oracle.json');

    // 6. Criar arquivos de log iniciais
    console.log('6Ô∏è‚É£ Inicializando sistema de logs...');
    const logFiles = [
      'logs/oracle-mcp.log',
      'logs/error.log',
      'logs/notifications.log'
    ];

    for (const logFile of logFiles) {
      await fs.writeFile(path.join(__dirname, logFile), '');
      console.log(`   ‚úÖ ${logFile}`);
    }
    console.log('');

    // 7. Tornar scripts execut√°veis
    console.log('7Ô∏è‚É£ Configurando scripts...');
    try {
      execSync('chmod +x scripts/*.js', { stdio: 'pipe' });
      console.log('   ‚úÖ Scripts configurados como execut√°veis');
    } catch {
      console.log('   ‚ö†Ô∏è  N√£o foi poss√≠vel configurar permiss√µes (Windows?)');
    }
    console.log('');

    // 8. Verificar instala√ß√£o
    console.log('8Ô∏è‚É£ Verificando instala√ß√£o...');
    
    // Verificar se node_modules existe
    try {
      await fs.access(path.join(__dirname, 'node_modules'));
      console.log('   ‚úÖ node_modules encontrado');
    } catch {
      console.log('   ‚ùå node_modules n√£o encontrado');
    }

    // Verificar se arquivos principais existem
    const mainFiles = [
      'src/index.js',
      'src/oracle-monitor.js',
      'src/migration-validator.js',
      'src/notification-service.js',
      'src/logger.js'
    ];

    for (const file of mainFiles) {
      try {
        await fs.access(path.join(__dirname, file));
        console.log(`   ‚úÖ ${file}`);
      } catch {
        console.log(`   ‚ùå ${file} n√£o encontrado`);
      }
    }
    console.log('');

    // 9. Instru√ß√µes finais
    console.log('üéâ Instala√ß√£o conclu√≠da com sucesso!\n');
    console.log('üìã Pr√≥ximos passos:');
    console.log('1. Configure suas credenciais Oracle no arquivo .env');
    console.log('2. Teste a conex√£o: node scripts/test-connection.js');
    console.log('3. Inicie o servidor: npm start');
    console.log('4. Consulte o README.md para mais informa√ß√µes\n');
    
    console.log('üîß Comandos √∫teis:');
    console.log('   npm start          - Iniciar servidor MCP');
    console.log('   npm run dev        - Modo desenvolvimento');
    console.log('   npm test           - Executar testes');
    console.log('   node scripts/test-connection.js - Testar conex√£o Oracle\n');

  } catch (error) {
    console.error('‚ùå Erro durante a instala√ß√£o:', error.message);
    process.exit(1);
  }
}

install();
