#!/usr/bin/env node
/**
 * Script de Diagn√≥stico de Conectividade Oracle
 * Execute este script para diagnosticar problemas de conectividade
 */

import oracledb from 'oracledb';
import fs from 'fs';
import os from 'os';

console.log('üîç Oracle MCP - Diagn√≥stico de Conectividade\n');
console.log('=' .repeat(60));

// 1. Informa√ß√µes do Sistema
console.log('\nüìã Informa√ß√µes do Sistema:');
console.log(`   Sistema Operacional: ${os.platform()} ${os.arch()}`);
console.log(`   Node.js: ${process.version}`);
console.log(`   Oracle Driver: ${oracledb.versionString || oracledb.version}`);

// 2. Verificar modo Oracle
console.log('\nüîß Modo Oracle Client:');
console.log(`   Modo atual: ${oracledb.thin ? 'Thin' : 'Thick'}`);
if (oracledb.thin) {
  console.log('   ‚ö†Ô∏è  Modo Thin ativo - pode ter limita√ß√µes de compatibilidade');
} else {
  console.log('   ‚úÖ Modo Thick ativo - suporte completo');
}

// 3. Verificar vari√°veis de ambiente
console.log('\nüåç Vari√°veis de Ambiente:');
const oracleClientPath = process.env.ORACLE_CLIENT_PATH;
console.log(`   ORACLE_CLIENT_PATH: ${oracleClientPath || 'N√ÉO DEFINIDA'}`);
console.log(`   PATH cont√©m oracle: ${process.env.PATH?.includes('oracle') ? 'SIM' : 'N√ÉO'}`);

// 4. Verificar Oracle Instant Client
console.log('\nüìÅ Verifica√ß√£o do Oracle Instant Client:');
const possiblePaths = [
  oracleClientPath,
  'C:\\oracle\\instantclient_21_8\\instantclient_21_8',
  'C:\\oracle\\instantclient_21_8',
  'C:\\oracle\\instantclient_21_7\\instantclient_21_7',
  'C:\\oracle\\instantclient_19_8\\instantclient_19_8',
  '/opt/oracle/instantclient_21_8/instantclient_21_8',
  '/opt/oracle/instantclient_21_7/instantclient_21_7',
  '/opt/oracle/instantclient_19_8/instantclient_19_8'
].filter(Boolean);

let foundPaths = [];
let hasOciDll = false;

for (const path of possiblePaths) {
  if (fs.existsSync(path)) {
    console.log(`   ‚úÖ Encontrado: ${path}`);
    foundPaths.push(path);
    
    // Verificar se tem oci.dll (Windows) ou libclntsh.so (Linux)
    const ociFile = os.platform() === 'win32' ? 'oci.dll' : 'libclntsh.so';
    if (fs.existsSync(`${path}/${ociFile}`)) {
      console.log(`      ‚úÖ ${ociFile} encontrado`);
      hasOciDll = true;
    } else {
      console.log(`      ‚ö†Ô∏è  ${ociFile} n√£o encontrado`);
    }
  } else {
    console.log(`   ‚ùå N√£o encontrado: ${path}`);
  }
}

// 5. Tentar inicializar modo Thick
if (foundPaths.length > 0 && oracledb.thin) {
  console.log('\nüîÑ Tentando inicializar modo Thick...');
  
  let thickInitialized = false;
  for (const clientPath of foundPaths) {
    try {
      console.log(`   Tentando: ${clientPath}`);
      oracledb.initOracleClient({ libDir: clientPath });
      console.log(`   ‚úÖ Modo Thick inicializado com: ${clientPath}`);
      console.log(`   üìä Modo atual: ${oracledb.thin ? 'Thin' : 'Thick'}`);
      thickInitialized = true;
      break;
    } catch (error) {
      console.log(`   ‚ùå Falha: ${error.message}`);
    }
  }
  
  if (!thickInitialized) {
    console.log('   ‚ö†Ô∏è  N√£o foi poss√≠vel inicializar modo Thick');
  }
}

// 6. Verificar configura√ß√£o MCP
console.log('\n‚öôÔ∏è  Verifica√ß√£o da Configura√ß√£o MCP:');
const mcpConfigPath = os.platform() === 'win32' 
  ? `${os.homedir()}\\.cursor\\mcp.json`
  : `${os.homedir()}/.cursor/mcp.json`;

if (fs.existsSync(mcpConfigPath)) {
  console.log(`   ‚úÖ Arquivo MCP encontrado: ${mcpConfigPath}`);
  try {
    const mcpConfig = JSON.parse(fs.readFileSync(mcpConfigPath, 'utf8'));
    const oracleServer = mcpConfig.mcpServers?.['oracle-monitor-2'];
    
    if (oracleServer) {
      console.log('   ‚úÖ Servidor oracle-monitor-2 configurado');
      console.log(`   üìä Vers√£o: ${oracleServer.command}`);
      
      if (oracleServer.env?.ORACLE_CLIENT_PATH) {
        console.log(`   ‚úÖ ORACLE_CLIENT_PATH configurado: ${oracleServer.env.ORACLE_CLIENT_PATH}`);
      } else {
        console.log('   ‚ö†Ô∏è  ORACLE_CLIENT_PATH n√£o configurado no MCP');
      }
      
      if (oracleServer.env?.ORACLE_CONNECTIONS) {
        console.log('   ‚úÖ ORACLE_CONNECTIONS configurado');
        try {
          const connections = JSON.parse(oracleServer.env.ORACLE_CONNECTIONS);
          const connNames = Object.keys(connections.connections || {});
          console.log(`   üìä Conex√µes: ${connNames.join(', ')}`);
        } catch (e) {
          console.log('   ‚ö†Ô∏è  Erro ao parsear ORACLE_CONNECTIONS');
        }
      } else {
        console.log('   ‚ö†Ô∏è  ORACLE_CONNECTIONS n√£o configurado');
      }
    } else {
      console.log('   ‚ùå Servidor oracle-monitor-2 n√£o encontrado na configura√ß√£o');
    }
  } catch (error) {
    console.log(`   ‚ùå Erro ao ler configura√ß√£o MCP: ${error.message}`);
  }
} else {
  console.log(`   ‚ùå Arquivo MCP n√£o encontrado: ${mcpConfigPath}`);
}

// 7. Resumo e Recomenda√ß√µes
console.log('\n' + '=' .repeat(60));
console.log('üìã RESUMO E RECOMENDA√á√ïES:');
console.log('=' .repeat(60));

if (oracledb.thin) {
  console.log('\n‚ö†Ô∏è  PROBLEMA DETECTADO: Modo Thin ativo');
  console.log('   ‚Ä¢ Pode causar erro "password verifier type 0x939 not supported"');
  console.log('   ‚Ä¢ Recomenda√ß√£o: Instalar Oracle Instant Client');
  
  if (foundPaths.length === 0) {
    console.log('\nüîß SOLU√á√ÉO:');
    console.log('   1. Execute: scripts\\install-oracle-simple.bat (Windows)');
    console.log('   2. Ou: sudo ./scripts/install-oracle-client.sh (Linux/macOS)');
    console.log('   3. Reinicie o Cursor/Claude');
  } else if (!hasOciDll) {
    console.log('\nüîß SOLU√á√ÉO:');
    console.log('   ‚Ä¢ Oracle Instant Client encontrado mas incompleto');
    console.log('   ‚Ä¢ Reinstale o Oracle Instant Client completo');
  } else {
    console.log('\nüîß SOLU√á√ÉO:');
    console.log('   ‚Ä¢ Oracle Instant Client instalado mas n√£o configurado no MCP');
    console.log('   ‚Ä¢ Adicione ORACLE_CLIENT_PATH na configura√ß√£o MCP');
    console.log('   ‚Ä¢ Reinicie o Cursor/Claude');
  }
} else {
  console.log('\n‚úÖ SISTEMA OK: Modo Thick ativo');
  console.log('   ‚Ä¢ Suporte completo ao Oracle');
  console.log('   ‚Ä¢ Compat√≠vel com verificadores de senha antigos');
}

console.log('\nüìö Para mais informa√ß√µes:');
console.log('   ‚Ä¢ Guia de Troubleshooting: documentation/pt/guides/TROUBLESHOOTING-ORACLE-CONNECTIVITY.md');
console.log('   ‚Ä¢ Documenta√ß√£o: documentation/pt/README.md');
console.log('   ‚Ä¢ Issues: https://github.com/lrferr/oracle-node-mcp/issues');

console.log('\n‚úÖ Diagn√≥stico conclu√≠do!');
