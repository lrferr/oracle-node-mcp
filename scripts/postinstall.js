#!/usr/bin/env node

import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

console.log('üöÄ Oracle Node MCP Server - P√≥s-instala√ß√£o\n');

async function postInstall() {
  try {
    // Criar diret√≥rios necess√°rios
    const projectRoot = path.join(__dirname, '..');
    const directories = ['logs', 'config', 'backups', 'migrations', 'reports'];
    
    for (const dir of directories) {
      const dirPath = path.join(projectRoot, dir);
      try {
        await fs.mkdir(dirPath, { recursive: true });
        console.log(`‚úÖ Diret√≥rio criado: ${dir}/`);
      } catch (error) {
        console.log(`‚ö†Ô∏è  Diret√≥rio ${dir}/ j√° existe`);
      }
    }

    // Criar arquivo .env se n√£o existir
    const envPath = path.join(projectRoot, '.env');
    const envExamplePath = path.join(projectRoot, 'env.example');
    
    try {
      await fs.access(envPath);
      console.log('‚úÖ Arquivo .env j√° existe');
    } catch {
      try {
        await fs.copyFile(envExamplePath, envPath);
        console.log('‚úÖ Arquivo .env criado a partir do exemplo');
      } catch (error) {
        console.log('‚ö†Ô∏è  N√£o foi poss√≠vel criar arquivo .env');
      }
    }

    // Criar arquivo de configura√ß√£o Oracle
    const oracleConfigPath = path.join(projectRoot, 'config', 'oracle.json');
    const oracleConfig = {
      connection: {
        poolMin: 1,
        poolMax: 10,
        poolIncrement: 1,
        poolTimeout: 60,
        poolPingInterval: 60
      },
      monitoring: {
        healthCheckInterval: 300000,
        schemaCheckInterval: 600000,
        performanceCheckInterval: 300000
      },
      alerts: {
        tablespaceUsageThreshold: 80,
        connectionThreshold: 100,
        performanceThreshold: 1000
      }
    };

    try {
      await fs.writeFile(oracleConfigPath, JSON.stringify(oracleConfig, null, 2));
      console.log('‚úÖ Configura√ß√£o Oracle criada');
    } catch (error) {
      console.log('‚ö†Ô∏è  Erro ao criar configura√ß√£o Oracle');
    }

    console.log('\nüìã Pr√≥ximos passos:');
    console.log('1. Configure suas credenciais Oracle no arquivo .env');
    console.log('2. Execute: npx oracle-mcp --test-connection');
    console.log('3. Configure no Cursor/Claude Desktop');
    console.log('4. Execute: npx oracle-mcp --setup-cursor');
    
    console.log('\nüîß Comandos dispon√≠veis:');
    console.log('  npx oracle-mcp                    - Iniciar servidor MCP');
    console.log('  npx oracle-mcp --test-connection  - Testar conex√£o Oracle');
    console.log('  npx oracle-mcp --setup-cursor     - Configurar Cursor IDE');
    console.log('  npx oracle-mcp --help             - Mostrar ajuda');
    
    console.log('\nüìö Documenta√ß√£o:');
    console.log('  https://github.com/oracle-mcp/oracle-node-mcp');
    
    console.log('\n‚úÖ Instala√ß√£o conclu√≠da com sucesso!');

  } catch (error) {
    console.error('‚ùå Erro durante a p√≥s-instala√ß√£o:', error.message);
    process.exit(1);
  }
}

postInstall();
